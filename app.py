import requests
from bs4 import BeautifulSoup
import streamlit as st
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from datetime import datetime, timedelta
import seaborn as sns
from scipy import stats
from scipy.signal import fftconvolve
from joblib import Parallel, delayed
import warnings
from matplotlib.ticker import FuncFormatter
from SALib.sample.sobol import sample
from SALib.analyze.sobol import analyze

np.random.seed(50)

# Configura√ß√µes iniciais
st.set_page_config(page_title="Simulador de Emiss√µes CO‚ÇÇeq - Cervejarias", layout="wide")
warnings.filterwarnings("ignore", category=FutureWarning)
pd.set_option('display.max_columns', None)
pd.set_option('display.width', None)
np.seterr(divide='ignore', invalid='ignore')
plt.rcParams['figure.dpi'] = 150
plt.rcParams['font.size'] = 10
sns.set_style("whitegrid")

# =============================================================================
# FUN√á√ïES DE COTA√á√ÉO DO CARBONO (mantidas iguais)
# =============================================================================

def obter_cotacao_carbono_investing():
    # (mantido igual ao c√≥digo original)
    try:
        url = "https://www.investing.com/commodities/carbon-emissions"
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            'Accept-Language': 'pt-BR,pt;q=0.9,en;q=0.8',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
            'Referer': 'https://www.investing.com/'
        }
        
        response = requests.get(url, headers=headers, timeout=15)
        response.raise_for_status()
        
        soup = BeautifulSoup(response.content, 'html.parser')
        
        selectores = [
            '[data-test="instrument-price-last"]',
            '.text-2xl',
            '.last-price-value',
            '.instrument-price-last',
            '.pid-1062510-last',
            '.float_lang_base_1',
            '.top.bold.inlineblock',
            '#last_last'
        ]
        
        preco = None
        fonte = "Investing.com"
        
        for seletor in selectores:
            try:
                elemento = soup.select_one(seletor)
                if elemento:
                    texto_preco = elemento.text.strip().replace(',', '')
                    texto_preco = ''.join(c for c in texto_preco if c.isdigit() or c == '.')
                    if texto_preco:
                        preco = float(texto_preco)
                        break
            except (ValueError, AttributeError):
                continue
        
        if preco is not None:
            return preco, "‚Ç¨", "Carbon Emissions Future", True, fonte
        
        import re
        padroes_preco = [
            r'"last":"([\d,]+)"',
            r'data-last="([\d,]+)"',
            r'last_price["\']?:\s*["\']?([\d,]+)',
            r'value["\']?:\s*["\']?([\d,]+)'
        ]
        
        html_texto = str(soup)
        for padrao in padroes_preco:
            matches = re.findall(padrao, html_texto)
            for match in matches:
                try:
                    preco_texto = match.replace(',', '')
                    preco = float(preco_texto)
                    if 50 < preco < 200:
                        return preco, "‚Ç¨", "Carbon Emissions Future", True, fonte
                except ValueError:
                    continue
                    
        return None, None, None, False, fonte
        
    except Exception as e:
        return None, None, None, False, f"Investing.com - Erro: {str(e)}"

def obter_cotacao_carbono():
    preco, moeda, contrato_info, sucesso, fonte = obter_cotacao_carbono_investing()
    
    if sucesso:
        return preco, moeda, f"{contrato_info}", True, fonte
    
    return 85.50, "‚Ç¨", "Carbon Emissions (Refer√™ncia)", False, "Refer√™ncia"

def obter_cotacao_euro_real():
    try:
        url = "https://economia.awesomeapi.com.br/last/EUR-BRL"
        response = requests.get(url, timeout=10)
        if response.status_code == 200:
            data = response.json()
            cotacao = float(data['EURBRL']['bid'])
            return cotacao, "R$", True, "AwesomeAPI"
    except:
        pass
    
    try:
        url = "https://api.exchangerate-api.com/v4/latest/EUR"
        response = requests.get(url, timeout=10)
        if response.status_code == 200:
            data = response.json()
            cotacao = data['rates']['BRL']
            return cotacao, "R$", True, "ExchangeRate-API"
    except:
        pass
    
    return 5.50, "R$", False, "Refer√™ncia"

def calcular_valor_creditos(emissoes_evitadas_tco2eq, preco_carbono_por_tonelada, moeda, taxa_cambio=1):
    valor_total = emissoes_evitadas_tco2eq * preco_carbono_por_tonelada * taxa_cambio
    return valor_total

def exibir_cotacao_carbono():
    st.sidebar.header("üí∞ Mercado de Carbono e C√¢mbio")
    
    if not st.session_state.get('cotacao_carregada', False):
        st.session_state.mostrar_atualizacao = True
        st.session_state.cotacao_carregada = True
    
    col1, col2 = st.sidebar.columns([3, 1])
    with col1:
        if st.button("üîÑ Atualizar Cota√ß√µes", key="atualizar_cotacoes"):
            st.session_state.cotacao_atualizada = True
            st.session_state.mostrar_atualizacao = True
    
    if st.session_state.get('mostrar_atualizacao', False):
        st.sidebar.info("üîÑ Atualizando cota√ß√µes...")
        
        preco_carbono, moeda, contrato_info, sucesso_carbono, fonte_carbono = obter_cotacao_carbono()
        preco_euro, moeda_real, sucesso_euro, fonte_euro = obter_cotacao_euro_real()
        
        st.session_state.preco_carbono = preco_carbono
        st.session_state.moeda_carbono = moeda
        st.session_state.taxa_cambio = preco_euro
        st.session_state.moeda_real = moeda_real
        st.session_state.fonte_cotacao = fonte_carbono
        
        st.session_state.mostrar_atualizacao = False
        st.session_state.cotacao_atualizada = False
        
        st.rerun()

    st.sidebar.metric(
        label=f"Pre√ßo do Carbono (tCO‚ÇÇeq)",
        value=f"{st.session_state.moeda_carbono} {st.session_state.preco_carbono:.2f}",
        help=f"Fonte: {st.session_state.fonte_cotacao}"
    )
    
    st.sidebar.metric(
        label="Euro (EUR/BRL)",
        value=f"{st.session_state.moeda_real} {st.session_state.taxa_cambio:.2f}",
        help="Cota√ß√£o do Euro em Reais Brasileiros"
    )
    
    preco_carbono_reais = st.session_state.preco_carbono * st.session_state.taxa_cambio
    
    st.sidebar.metric(
        label=f"Carbono em Reais (tCO‚ÇÇeq)",
        value=f"R$ {preco_carbono_reais:.2f}",
        help="Pre√ßo do carbono convertido para Reais Brasileiros"
    )
    
    with st.sidebar.expander("‚ÑπÔ∏è Informa√ß√µes do Mercado de Carbono"):
        st.markdown(f"""
        **üìä Cota√ß√µes Atuais:**
        - **Fonte do Carbono:** {st.session_state.fonte_cotacao}
        - **Pre√ßo Atual:** {st.session_state.moeda_carbono} {st.session_state.preco_carbono:.2f}/tCO‚ÇÇeq
        - **C√¢mbio EUR/BRL:** 1 Euro = R$ {st.session_state.taxa_cambio:.2f}
        - **Carbono em Reais:** R$ {preco_carbono_reais:.2f}/tCO‚ÇÇeq
        
        **üåç Mercado de Refer√™ncia:**
        - European Union Allowances (EUA)
        - European Emissions Trading System (EU ETS)
        - Contratos futuros de carbono
        - Pre√ßos em tempo real
        
        **üîÑ Atualiza√ß√£o:**
        - As cota√ß√µes s√£o carregadas automaticamente ao abrir o aplicativo
        - Clique em **"Atualizar Cota√ß√µes"** para obter valores mais recentes
        - Em caso de falha na conex√£o, s√£o utilizados valores de refer√™ncia atualizados
        
        **üí° Importante:**
        - Os pre√ßos s√£o baseados no mercado regulado da UE
        - Valores em tempo real sujeitos a varia√ß√µes de mercado
        - Convers√£o para Real utilizando c√¢mbio comercial
        """)

# =============================================================================
# INICIALIZA√á√ÉO DA SESSION STATE
# =============================================================================

def inicializar_session_state():
    if 'preco_carbono' not in st.session_state:
        preco_carbono, moeda, contrato_info, sucesso, fonte = obter_cotacao_carbono()
        st.session_state.preco_carbono = preco_carbono
        st.session_state.moeda_carbono = moeda
        st.session_state.fonte_cotacao = fonte
        
    if 'taxa_cambio' not in st.session_state:
        preco_euro, moeda_real, sucesso_euro, fonte_euro = obter_cotacao_euro_real()
        st.session_state.taxa_cambio = preco_euro
        st.session_state.moeda_real = moeda_real
        
    if 'moeda_real' not in st.session_state:
        st.session_state.moeda_real = "R$"
    if 'cotacao_atualizada' not in st.session_state:
        st.session_state.cotacao_atualizada = False
    if 'run_simulation' not in st.session_state:
        st.session_state.run_simulation = False
    if 'mostrar_atualizacao' not in st.session_state:
        st.session_state.mostrar_atualizacao = False
    if 'cotacao_carregada' not in st.session_state:
        st.session_state.cotacao_carregada = False

inicializar_session_state()

# =============================================================================
# PAR√ÇMETROS ESPEC√çFICOS PARA RES√çDUOS DE CERVEJARIA
# =============================================================================

# Fun√ß√£o para formatar n√∫meros no padr√£o brasileiro
def formatar_br(numero):
    if pd.isna(numero):
        return "N/A"
    numero = round(numero, 2)
    return f"{numero:,.2f}".replace(",", "X").replace(".", ",").replace("X", ".")

def br_format(x, pos):
    if x == 0:
        return "0"
    if abs(x) < 0.01:
        return f"{x:.1e}".replace(".", ",")
    if abs(x) >= 1000:
        return f"{x:,.0f}".replace(",", "X").replace(".", ",").replace("X", ".")
    return f"{x:,.2f}".replace(",", "X").replace(".", ",").replace("X", ".")

# T√≠tulo do aplicativo para cervejarias
st.title("üçª Simulador de Emiss√µes de tCO‚ÇÇeq para Cervejarias")
st.markdown("""
Esta ferramenta calcula os Cr√©ditos de Carbono para cervejarias, comparando diferentes m√©todos de gest√£o de res√≠duos (baga√ßo de malte e levedura)
""")

# =============================================================================
# SIDEBAR COM PAR√ÇMETROS ESPEC√çFICOS PARA CERVEJARIAS
# =============================================================================

exibir_cotacao_carbono()

with st.sidebar:
    st.header("‚öôÔ∏è Par√¢metros da Cervejaria")
    
    # Produ√ß√£o de cerveja e c√°lculo autom√°tico de res√≠duos
    producao_mensal_litros = st.slider("Produ√ß√£o mensal de cerveja (litros)", 
                                     min_value=500, max_value=10000, value=1500, step=500,
                                     help="Volume mensal de cerveja produzida")
    
    # C√°lculo autom√°tico de res√≠duos baseado na produ√ß√£o
    dias_operacao_mes = st.slider("Dias de opera√ß√£o por m√™s", 20, 30, 25, 1,
                                help="N√∫mero de dias em que a cervejaria opera por m√™s")
    
    # Calcular res√≠duos automaticamente (baseado nos nossos c√°lculos anteriores)
    residuos_kg_dia = (producao_mensal_litros * 0.17) / dias_operacao_mes
    residuos_kg_dia = int(residuos_kg_dia)
    
    st.info(f"**Res√≠duos estimados:** {residuos_kg_dia} kg/dia")
    
    st.subheader("üìä Composi√ß√£o dos Res√≠duos")
    
    # Composi√ß√£o dos res√≠duos da cervejaria
    percentual_bagaco = st.slider("Percentual de baga√ßo de malte", 70, 90, 80, 1,
                                 help="Percentual de baga√ßo de malte na composi√ß√£o dos res√≠duos")
    percentual_levedura = 100 - percentual_bagaco
    
    st.write(f"**Composi√ß√£o:** {percentual_bagaco}% baga√ßo + {percentual_levedura}% levedura")
    
    # Umidade m√©dia ponderada baseada na composi√ß√£o
    umidade_bagaco = st.slider("Umidade do baga√ßo (%)", 75, 85, 80, 1,
                              help="Teor de umidade do baga√ßo de malte")
    umidade_levedura = st.slider("Umidade da levedura (%)", 85, 95, 90, 1,
                                help="Teor de umidade da levedura gasta")
    
    # Calcular umidade m√©dia ponderada
    umidade_media = (umidade_bagaco * percentual_bagaco + umidade_levedura * percentual_levedura) / 100
    umidade = umidade_media / 100.0
    
    st.write(f"**Umidade m√©dia:** {umidade_media:.1f}%")
    
    # DOC espec√≠fico para res√≠duos de cervejaria
    doc_bagaco = st.slider("DOC do baga√ßo", 0.70, 0.90, 0.80, 0.01,
                          help="Carbono Org√¢nico Degrad√°vel do baga√ßo de malte")
    doc_levedura = st.slider("DOC da levedura", 0.80, 0.95, 0.90, 0.01,
                            help="Carbono Org√¢nico Degrad√°vel da levedura")
    
    # DOC m√©dio ponderado
    doc_medio = (doc_bagaco * percentual_bagaco + doc_levedura * percentual_levedura) / 100
    DOC = doc_medio
    
    st.write(f"**DOC m√©dio:** {doc_medio:.3f}")
    
    st.subheader("üéØ Configura√ß√£o de Simula√ß√£o")
    anos_simulacao = st.slider("Anos de simula√ß√£o", 5, 50, 20, 5)
    n_simulations = st.slider("N√∫mero de simula√ß√µes Monte Carlo", 50, 1000, 100, 50)
    n_samples = st.slider("N√∫mero de amostras Sobol", 32, 256, 64, 16)
    
    if st.button("üöÄ Executar Simula√ß√£o", type="primary"):
        st.session_state.run_simulation = True

# =============================================================================
# PAR√ÇMETROS FIXOS AJUSTADOS PARA CERVEJARIAS
# =============================================================================

T = 25  # Temperatura m√©dia (¬∫C)
DOCf_val = 0.0147 * T + 0.28
MCF = 1
F = 0.5
OX = 0.1
Ri = 0.0
k_ano = 0.06

# Par√¢metros espec√≠ficos para res√≠duos de cervejaria
TOC_CERVEJARIA = 0.45  # Maior que res√≠duos gen√©ricos devido √† alta mat√©ria org√¢nica
TN_CERVEJARIA = 25.0 / 1000  # Teor de nitrog√™nio mais alto

# Ajustar fatores de emiss√£o para res√≠duos de cervejaria (mais biodegrad√°veis)
CH4_C_FRAC_CERVEJARIA = 0.20 / 100  # Maior potencial de metano
N2O_N_FRAC_CERVEJARIA = 1.20 / 100  # Maior potencial de √≥xido nitroso

DIAS_COMPOSTAGEM = 50

# Perfis de emiss√£o ajustados para res√≠duos de cervejaria (decomposi√ß√£o mais r√°pida)
PERFIL_CH4_CERVEJARIA = np.array([
    0.03, 0.04, 0.05, 0.07, 0.09,  # Dias 1-5 (in√≠cio mais r√°pido)
    0.12, 0.15, 0.18, 0.20, 0.18,  # Dias 6-10 (pico antecipado)
    0.15, 0.12, 0.10, 0.08, 0.06,  # Dias 11-15
    0.05, 0.04, 0.03, 0.02, 0.02,  # Dias 16-20
    0.01, 0.01, 0.01, 0.005, 0.005,  # Dias 21-25
    0.005, 0.005, 0.005, 0.005, 0.005,  # Dias 26-30
    0.002, 0.002, 0.002, 0.002, 0.002,  # Dias 31-35
    0.001, 0.001, 0.001, 0.001, 0.001,  # Dias 36-40
    0.001, 0.001, 0.001, 0.001, 0.001,  # Dias 41-45
    0.001, 0.001, 0.001, 0.001, 0.001   # Dias 46-50
])
PERFIL_CH4_CERVEJARIA /= PERFIL_CH4_CERVEJARIA.sum()

PERFIL_N2O_CERVEJARIA = np.array([
    0.12, 0.15, 0.20, 0.08, 0.05,  # Dias 1-5 (pico mais pronunciado)
    0.06, 0.08, 0.10, 0.12, 0.15,  # Dias 6-10
    0.18, 0.20, 0.18, 0.15, 0.12,  # Dias 11-15 (pico principal)
    0.10, 0.08, 0.06, 0.05, 0.04,  # Dias 16-20
    0.03, 0.02, 0.01, 0.01, 0.01,  # Dias 21-25
    0.005, 0.005, 0.005, 0.005, 0.005,  # Dias 26-30
    0.002, 0.002, 0.002, 0.002, 0.002,  # Dias 31-35
    0.001, 0.001, 0.001, 0.001, 0.001,  # Dias 36-40
    0.001, 0.001, 0.001, 0.001, 0.001,  # Dias 41-45
    0.001, 0.001, 0.001, 0.001, 0.001   # Dias 46-50
])
PERFIL_N2O_CERVEJARIA /= PERFIL_N2O_CERVEJARIA.sum()

# Emiss√µes pr√©-descarte ajustadas para cervejaria
CH4_pre_descarte_ugC_por_kg_h_media = 3.50  # Valor mais alto para res√≠duos de cervejaria
fator_conversao_C_para_CH4 = 16/12
CH4_pre_descarte_ugCH4_por_kg_h_media = CH4_pre_descarte_ugC_por_kg_h_media * fator_conversao_C_para_CH4
CH4_pre_descarte_g_por_kg_dia = CH4_pre_descarte_ugCH4_por_kg_h_media * 24 / 1_000_000

N2O_pre_descarte_mgN_por_kg = 25.0  # Valor mais alto
N2O_pre_descarte_mgN_por_kg_dia = N2O_pre_descarte_mgN_por_kg / 3
N2O_pre_descarte_g_por_kg_dia = N2O_pre_descarte_mgN_por_kg_dia * (44/28) / 1000

PERFIL_N2O_PRE_DESCARTE = {1: 0.8623, 2: 0.10, 3: 0.0377}

# GWP (IPCC AR6)
GWP_CH4_20 = 79.7
GWP_N2O_20 = 273

# Per√≠odo de Simula√ß√£o
dias = anos_simulacao * 365
ano_inicio = datetime.now().year
data_inicio = datetime(ano_inicio, 1, 1)
datas = pd.date_range(start=data_inicio, periods=dias, freq='D')

PERFIL_N2O = {1: 0.10, 2: 0.30, 3: 0.40, 4: 0.15, 5: 0.05}

# =============================================================================
# FUN√á√ïES DE C√ÅLCULO ESPEC√çFICAS PARA CERVEJARIAS
# =============================================================================

def ajustar_emissoes_pre_descarte(O2_concentracao):
    ch4_ajustado = CH4_pre_descarte_g_por_kg_dia

    if O2_concentracao == 21:
        fator_n2o = 1.0
    elif O2_concentracao == 10:
        fator_n2o = 11.11 / 20.26
    elif O2_concentracao == 1:
        fator_n2o = 7.86 / 20.26
    else:
        fator_n2o = 1.0

    n2o_ajustado = N2O_pre_descarte_g_por_kg_dia * fator_n2o
    return ch4_ajustado, n2o_ajustado

def calcular_emissoes_pre_descarte(O2_concentracao, dias_simulacao=dias):
    ch4_ajustado, n2o_ajustado = ajustar_emissoes_pre_descarte(O2_concentracao)

    emissoes_CH4_pre_descarte_kg = np.full(dias_simulacao, residuos_kg_dia * ch4_ajustado / 1000)
    emissoes_N2O_pre_descarte_kg = np.zeros(dias_simulacao)

    for dia_entrada in range(dias_simulacao):
        for dias_apos_descarte, fracao in PERFIL_N2O_PRE_DESCARTE.items():
            dia_emissao = dia_entrada + dias_apos_descarte - 1
            if dia_emissao < dias_simulacao:
                emissoes_N2O_pre_descarte_kg[dia_emissao] += (
                    residuos_kg_dia * n2o_ajustado * fracao / 1000
                )

    return emissoes_CH4_pre_descarte_kg, emissoes_N2O_pre_descarte_kg

def calcular_emissoes_aterro(params, dias_simulacao=dias):
    umidade_val, temp_val, doc_val = params

    fator_umid = (1 - umidade_val) / (1 - 0.55)
    # Para cervejaria, assumir maior exposi√ß√£o devido ao manejo
    massa_exposta_kg = residuos_kg_dia * 0.8  # 80% da massa di√°ria exposta
    f_aberto = np.clip((massa_exposta_kg / residuos_kg_dia) * (8 / 24), 0.0, 1.0)
    docf_calc = 0.0147 * temp_val + 0.28

    potencial_CH4_por_kg = doc_val * docf_calc * MCF * F * (16/12) * (1 - Ri) * (1 - OX)
    potencial_CH4_lote_diario = residuos_kg_dia * potencial_CH4_por_kg

    t = np.arange(1, dias_simulacao + 1, dtype=float)
    kernel_ch4 = np.exp(-k_ano * (t - 1) / 365.0) - np.exp(-k_ano * t / 365.0)
    entradas_diarias = np.ones(dias_simulacao, dtype=float)
    emissoes_CH4 = fftconvolve(entradas_diarias, kernel_ch4, mode='full')[:dias_simulacao]
    emissoes_CH4 *= potencial_CH4_lote_diario

    # Valores ajustados para res√≠duos de cervejaria
    E_aberto = 2.25  # Maior que res√≠duos gen√©ricos
    E_fechado = 2.50
    E_medio = f_aberto * E_aberto + (1 - f_aberto) * E_fechado
    E_medio_ajust = E_medio * fator_umid
    emissao_diaria_N2O = (E_medio_ajust * (44/28) / 1_000_000) * residuos_kg_dia

    kernel_n2o = np.array([PERFIL_N2O.get(d, 0) for d in range(1, 6)], dtype=float)
    emissoes_N2O = fftconvolve(np.full(dias_simulacao, emissao_diaria_N2O), kernel_n2o, mode='full')[:dias_simulacao]

    O2_concentracao = 21
    emissoes_CH4_pre_descarte_kg, emissoes_N2O_pre_descarte_kg = calcular_emissoes_pre_descarte(O2_concentracao, dias_simulacao)

    total_ch4_aterro_kg = emissoes_CH4 + emissoes_CH4_pre_descarte_kg
    total_n2o_aterro_kg = emissoes_N2O + emissoes_N2O_pre_descarte_kg

    return total_ch4_aterro_kg, total_n2o_aterro_kg

def calcular_emissoes_compostagem_cervejaria(params, dias_simulacao=dias):
    umidade_val, temp_val, doc_val = params
    fracao_ms = 1 - umidade_val
    
    # Usando par√¢metros espec√≠ficos para cervejaria
    ch4_total_por_lote = residuos_kg_dia * (TOC_CERVEJARIA * CH4_C_FRAC_CERVEJARIA * (16/12) * fracao_ms)
    n2o_total_por_lote = residuos_kg_dia * (TN_CERVEJARIA * N2O_N_FRAC_CERVEJARIA * (44/28) * fracao_ms)

    emissoes_CH4 = np.zeros(dias_simulacao)
    emissoes_N2O = np.zeros(dias_simulacao)

    for dia_entrada in range(dias_simulacao):
        for dia_compostagem in range(len(PERFIL_CH4_CERVEJARIA)):
            dia_emissao = dia_entrada + dia_compostagem
            if dia_emissao < dias_simulacao:
                emissoes_CH4[dia_emissao] += ch4_total_por_lote * PERFIL_CH4_CERVEJARIA[dia_compostagem]
                emissoes_N2O[dia_emissao] += n2o_total_por_lote * PERFIL_N2O_CERVEJARIA[dia_compostagem]

    return emissoes_CH4, emissoes_N2O

def executar_simulacao_completa_cervejaria(parametros):
    umidade, T, DOC = parametros
    
    ch4_aterro, n2o_aterro = calcular_emissoes_aterro([umidade, T, DOC])
    ch4_compost, n2o_compost = calcular_emissoes_compostagem_cervejaria([umidade, T, DOC])

    total_aterro_tco2eq = (ch4_aterro * GWP_CH4_20 + n2o_aterro * GWP_N2O_20) / 1000
    total_compost_tco2eq = (ch4_compost * GWP_CH4_20 + n2o_compost * GWP_N2O_20) / 1000

    reducao_tco2eq = total_aterro_tco2eq.sum() - total_compost_tco2eq.sum()
    return reducao_tco2eq

# =============================================================================
# EXECU√á√ÉO DA SIMULA√á√ÉO PARA CERVEJARIAS
# =============================================================================

if st.session_state.get('run_simulation', False):
    with st.spinner('Executando simula√ß√£o para cervejaria...'):
        params_base = [umidade, T, DOC]

        ch4_aterro_dia, n2o_aterro_dia = calcular_emissoes_aterro(params_base)
        ch4_compost_dia, n2o_compost_dia = calcular_emissoes_compostagem_cervejaria(params_base)

        # Construir DataFrame
        df = pd.DataFrame({
            'Data': datas,
            'CH4_Aterro_kg_dia': ch4_aterro_dia,
            'N2O_Aterro_kg_dia': n2o_aterro_dia,
            'CH4_Compost_kg_dia': ch4_compost_dia,
            'N2O_Compost_kg_dia': n2o_compost_dia,
        })

        for gas in ['CH4_Aterro', 'N2O_Aterro', 'CH4_Compost', 'N2O_Compost']:
            df[f'{gas}_tCO2eq'] = df[f'{gas}_kg_dia'] * (GWP_CH4_20 if 'CH4' in gas else GWP_N2O_20) / 1000

        df['Total_Aterro_tCO2eq_dia'] = df['CH4_Aterro_tCO2eq'] + df['N2O_Aterro_tCO2eq']
        df['Total_Compost_tCO2eq_dia'] = df['CH4_Compost_tCO2eq'] + df['N2O_Compost_tCO2eq']

        df['Total_Aterro_tCO2eq_acum'] = df['Total_Aterro_tCO2eq_dia'].cumsum()
        df['Total_Compost_tCO2eq_acum'] = df['Total_Compost_tCO2eq_dia'].cumsum()
        df['Reducao_tCO2eq_acum'] = df['Total_Aterro_tCO2eq_acum'] - df['Total_Compost_tCO2eq_acum']

        # Resumo anual
        df['Year'] = df['Data'].dt.year
        df_anual = df.groupby('Year').agg({
            'Total_Aterro_tCO2eq_dia': 'sum',
            'Total_Compost_tCO2eq_dia': 'sum',
        }).reset_index()

        df_anual['Emission reductions (t CO‚ÇÇeq)'] = df_anual['Total_Aterro_tCO2eq_dia'] - df_anual['Total_Compost_tCO2eq_dia']
        df_anual['Cumulative reduction (t CO‚ÇÇeq)'] = df_anual['Emission reductions (t CO‚ÇÇeq)'].cumsum()

        df_anual.rename(columns={
            'Total_Aterro_tCO2eq_dia': 'Baseline emissions (t CO‚ÇÇeq)',
            'Total_Compost_tCO2eq_dia': 'Project emissions (t CO‚ÇÇeq)',
        }, inplace=True)

        # =============================================================================
        # EXIBI√á√ÉO DOS RESULTADOS
        # =============================================================================

        st.header("üìà Resultados da Simula√ß√£o - Cervejaria")
        
        # Obter valores totais
        total_evitado = df['Reducao_tCO2eq_acum'].iloc[-1]
        
        # Obter pre√ßo do carbono
        preco_carbono = st.session_state.preco_carbono
        moeda = st.session_state.moeda_carbono
        taxa_cambio = st.session_state.taxa_cambio
        
        # Calcular valores financeiros
        valor_eur = calcular_valor_creditos(total_evitado, preco_carbono, moeda)
        valor_brl = calcular_valor_creditos(total_evitado, preco_carbono, "R$", taxa_cambio)
        
        # SE√á√ÉO: VALOR FINANCEIRO
        st.subheader("üí∞ Valor Financeiro das Emiss√µes Evitadas")
        
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric(
                f"Pre√ßo Carbono (Euro)", 
                f"{moeda} {preco_carbono:.2f}/tCO‚ÇÇeq"
            )
        with col2:
            st.metric(
                "Valor Total (Euro)", 
                f"{moeda} {formatar_br(valor_eur)}"
            )
        with col3:
            st.metric(
                "Valor Total (R$)", 
                f"R$ {formatar_br(valor_brl)}"
            )

        # RESUMO DAS EMISS√ïES EVITADAS
        st.subheader("üìä Resumo das Emiss√µes Evitadas")
        
        media_anual = total_evitado / anos_simulacao
        
        col1, col2 = st.columns(2)
        with col1:
            st.metric(
                "Total de emiss√µes evitadas", 
                f"{formatar_br(total_evitado)} tCO‚ÇÇeq"
            )
        with col2:
            st.metric(
                "M√©dia anual", 
                f"{formatar_br(media_anual)} tCO‚ÇÇeq/ano"
            )

        # GR√ÅFICO DE REDU√á√ÉO ACUMULADA
        st.subheader("üìâ Redu√ß√£o de Emiss√µes Acumulada")
        fig, ax = plt.subplots(figsize=(10, 6))
        ax.plot(df['Data'], df['Total_Aterro_tCO2eq_acum'], 'r-', 
                label='Cen√°rio Base (Aterro Sanit√°rio)', linewidth=2)
        ax.plot(df['Data'], df['Total_Compost_tCO2eq_acum'], 'g-', 
                label='Projeto (Compostagem)', linewidth=2)
        ax.fill_between(df['Data'], df['Total_Compost_tCO2eq_acum'], df['Total_Aterro_tCO2eq_acum'],
                        color='skyblue', alpha=0.5, label='Emiss√µes Evitadas')
        ax.set_title(f'Redu√ß√£o de Emiss√µes em {anos_simulacao} Anos - Cervejaria')
        ax.set_xlabel('Ano')
        ax.set_ylabel('tCO‚ÇÇeq Acumulado')
        ax.legend()
        ax.grid(True, linestyle='--', alpha=0.7)
        ax.yaxis.set_major_formatter(br_format)
        st.pyplot(fig)

        # AN√ÅLISE DE SENSIBILIDADE
        st.subheader("üéØ An√°lise de Sensibilidade Global (Sobol)")
        
        problem_cervejaria = {
            'num_vars': 3,
            'names': ['umidade', 'T', 'DOC'],
            'bounds': [
                [0.75, 0.90],    # Umidade para cervejaria
                [20.0, 35.0],    # Temperatura
                [0.70, 0.90],    # DOC para cervejaria
            ]
        }

        param_values = sample(problem_cervejaria, n_samples)
        results = Parallel(n_jobs=-1)(
            delayed(executar_simulacao_completa_cervejaria)(params) for params in param_values
        )
        Si = analyze(problem_cervejaria, np.array(results), print_to_console=False)
        
        sensibilidade_df = pd.DataFrame({
            'Par√¢metro': problem_cervejaria['names'],
            'S1': Si['S1'],
            'ST': Si['ST']
        }).sort_values('ST', ascending=False)

        fig, ax = plt.subplots(figsize=(10, 6))
        sns.barplot(x='ST', y='Par√¢metro', data=sensibilidade_df, palette='viridis', ax=ax)
        ax.set_title('Sensibilidade Global dos Par√¢metros - Cervejaria')
        ax.set_xlabel('√çndice ST')
        ax.set_ylabel('')
        ax.grid(axis='x', linestyle='--', alpha=0.7)
        st.pyplot(fig)

        # AN√ÅLISE DE INCERTEZA
        st.subheader("üé≤ An√°lise de Incerteza (Monte Carlo)")
        
        def gerar_parametros_mc(n):
            np.random.seed(50)
            umidade_vals = np.random.uniform(0.75, 0.90, n)
            temp_vals = np.random.normal(25, 3, n)
            doc_vals = np.random.triangular(0.70, 0.80, 0.90, n)
            return umidade_vals, temp_vals, doc_vals

        umidade_vals, temp_vals, doc_vals = gerar_parametros_mc(n_simulations)
        
        results_mc = []
        for i in range(n_simulations):
            params = [umidade_vals[i], temp_vals[i], doc_vals[i]]
            results_mc.append(executar_simulacao_completa_cervejaria(params))

        results_array = np.array(results_mc)
        media = np.mean(results_array)
        intervalo_95 = np.percentile(results_array, [2.5, 97.5])

        fig, ax = plt.subplots(figsize=(10, 6))
        sns.histplot(results_array, kde=True, bins=30, color='skyblue', ax=ax)
        ax.axvline(media, color='red', linestyle='--', 
                   label=f'M√©dia: {formatar_br(media)} tCO‚ÇÇeq')
        ax.axvline(intervalo_95[0], color='green', linestyle=':', label='IC 95%')
        ax.axvline(intervalo_95[1], color='green', linestyle=':')
        ax.set_title('Distribui√ß√£o das Emiss√µes Evitadas - Cervejaria')
        ax.set_xlabel('Emiss√µes Evitadas (tCO‚ÇÇeq)')
        ax.set_ylabel('Frequ√™ncia')
        ax.legend()
        ax.grid(alpha=0.3)
        ax.xaxis.set_major_formatter(br_format)
        st.pyplot(fig)

        # TABELAS DE RESULTADOS
        st.subheader("üìã Resultados Anuais")
        df_anual_formatado = df_anual.copy()
        for col in df_anual_formatado.columns:
            if col != 'Year':
                df_anual_formatado[col] = df_anual_formatado[col].apply(formatar_br)
        st.dataframe(df_anual_formatado)

else:
    st.info("üí° Ajuste os par√¢metros da cervejaria na barra lateral e clique em 'Executar Simula√ß√£o' para ver os resultados.")

# Rodap√© espec√≠fico para cervejarias
st.markdown("---")
st.markdown("""
**üçª Simulador para Cervejarias - Especifica√ß√µes T√©cnicas:**

**Res√≠duos Considerados:**
- Baga√ßo de malte (trub) 
- Levedura gasta
- Efluentes ricos em mat√©ria org√¢nica

**Par√¢metros Ajustados para Cervejaria:**
- DOC (Carbono Org√¢nico Degrad√°vel): 0.70-0.90
- Umidade: 75-90% 
- Alta biodegradabilidade
- Perfis de decomposi√ß√£o acelerada

**üí° Vantagens para Cervejarias:**
- Res√≠duos com alto potencial para gera√ß√£o de cr√©ditos de carbono
- Compostagem como alternativa sustent√°vel
- Redu√ß√£o significativa de emiss√µes comparado ao aterro
- Possibilidade de receita adicional com cr√©ditos de carbono
""")
